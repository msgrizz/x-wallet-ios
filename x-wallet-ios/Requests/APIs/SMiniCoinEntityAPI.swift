//
// SMiniCoinEntityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SMiniCoinEntityAPI {
    /**
     deleteSMiniCoin
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSMiniCoinUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteSMiniCoinUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     deleteSMiniCoin
     - DELETE /sMiniCoins/{id}
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSMiniCoinUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/sMiniCoins/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     findAllSMiniCoin
     
     - parameter page: (query) page (optional)
     - parameter size: (query) size (optional)
     - parameter sort: (query) sort (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAllSMiniCoinUsingGET(page: String? = nil, size: String? = nil, sort: String? = nil, completion: @escaping ((_ data: ResourcesSMiniCoin?,_ error: Error?) -> Void)) {
        findAllSMiniCoinUsingGETWithRequestBuilder(page: page, size: size, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     findAllSMiniCoin
     - GET /sMiniCoins
     - examples: [{contentType=application/json, example={
  "links" : [ {
    "templated" : true,
    "rel" : "rel",
    "href" : "href"
  }, {
    "templated" : true,
    "rel" : "rel",
    "href" : "href"
  } ],
  "content" : [ {
    "miniCoinPool" : {
      "important" : true,
      "createTime" : 0,
      "lastModifyTime" : 5,
      "transferable" : true,
      "name" : "name",
      "logo" : "logo",
      "fixed" : 6,
      "id" : 1,
      "version" : 5,
      "content" : "content",
      "issuer" : {
        "about" : "about",
        "mobile" : "mobile",
        "avatar" : "avatar",
        "version" : 5,
        "createTime" : 0,
        "lastModifyTime" : 1,
        "loginName" : "loginName",
        "nickname" : "nickname",
        "loginPass" : "loginPass",
        "paymentPass" : "paymentPass",
        "id" : 6,
        "email" : "email",
        "activated" : true
      },
      "activated" : true
    },
    "owner" : {
      "about" : "about",
      "mobile" : "mobile",
      "avatar" : "avatar",
      "version" : 5,
      "createTime" : 0,
      "lastModifyTime" : 1,
      "loginName" : "loginName",
      "nickname" : "nickname",
      "loginPass" : "loginPass",
      "paymentPass" : "paymentPass",
      "id" : 6,
      "email" : "email",
      "activated" : true
    },
    "createTime" : 0,
    "lastModifyTime" : 1,
    "id" : 6,
    "version" : 5,
    "activated" : true
  }, {
    "miniCoinPool" : {
      "important" : true,
      "createTime" : 0,
      "lastModifyTime" : 5,
      "transferable" : true,
      "name" : "name",
      "logo" : "logo",
      "fixed" : 6,
      "id" : 1,
      "version" : 5,
      "content" : "content",
      "issuer" : {
        "about" : "about",
        "mobile" : "mobile",
        "avatar" : "avatar",
        "version" : 5,
        "createTime" : 0,
        "lastModifyTime" : 1,
        "loginName" : "loginName",
        "nickname" : "nickname",
        "loginPass" : "loginPass",
        "paymentPass" : "paymentPass",
        "id" : 6,
        "email" : "email",
        "activated" : true
      },
      "activated" : true
    },
    "owner" : {
      "about" : "about",
      "mobile" : "mobile",
      "avatar" : "avatar",
      "version" : 5,
      "createTime" : 0,
      "lastModifyTime" : 1,
      "loginName" : "loginName",
      "nickname" : "nickname",
      "loginPass" : "loginPass",
      "paymentPass" : "paymentPass",
      "id" : 6,
      "email" : "email",
      "activated" : true
    },
    "createTime" : 0,
    "lastModifyTime" : 1,
    "id" : 6,
    "version" : 5,
    "activated" : true
  } ]
}}]
     
     - parameter page: (query) page (optional)
     - parameter size: (query) size (optional)
     - parameter sort: (query) sort (optional)

     - returns: RequestBuilder<ResourcesSMiniCoin> 
     */
    open class func findAllSMiniCoinUsingGETWithRequestBuilder(page: String? = nil, size: String? = nil, sort: String? = nil) -> RequestBuilder<ResourcesSMiniCoin> {
        let path = "/sMiniCoins"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "page": page, 
            "size": size, 
            "sort": sort
        ])
        

        let requestBuilder: RequestBuilder<ResourcesSMiniCoin>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     findByMiniCoinPoolIdSMiniCoin
     
     - parameter miniCoinPoolId: (query) miniCoinPoolId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findByMiniCoinPoolIdSMiniCoinUsingGET(miniCoinPoolId: Int64, completion: @escaping ((_ data: ResourcesListSMiniCoin?,_ error: Error?) -> Void)) {
        findByMiniCoinPoolIdSMiniCoinUsingGETWithRequestBuilder(miniCoinPoolId: miniCoinPoolId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     findByMiniCoinPoolIdSMiniCoin
     - GET /sMiniCoins/search/findByMiniCoinPoolId
     - examples: [{output=none}]
     
     - parameter miniCoinPoolId: (query) miniCoinPoolId 

     - returns: RequestBuilder<ResourcesListSMiniCoin> 
     */
    open class func findByMiniCoinPoolIdSMiniCoinUsingGETWithRequestBuilder(miniCoinPoolId: Int64) -> RequestBuilder<ResourcesListSMiniCoin> {
        let path = "/sMiniCoins/search/findByMiniCoinPoolId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "miniCoinPoolId": miniCoinPoolId.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<ResourcesListSMiniCoin>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     findOneSMiniCoin
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findOneSMiniCoinUsingGET(id: Int64, completion: @escaping ((_ data: ResourceSMiniCoin?,_ error: Error?) -> Void)) {
        findOneSMiniCoinUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     findOneSMiniCoin
     - GET /sMiniCoins/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<ResourceSMiniCoin> 
     */
    open class func findOneSMiniCoinUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<ResourceSMiniCoin> {
        var path = "/sMiniCoins/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniCoin>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sMiniCoinMiniCoinPool
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniCoinMiniCoinPoolUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        sMiniCoinMiniCoinPoolUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     sMiniCoinMiniCoinPool
     - DELETE /sMiniCoins/{id}/miniCoinPool
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Void> 
     */
    open class func sMiniCoinMiniCoinPoolUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/sMiniCoins/{id}/miniCoinPool"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sMiniCoinMiniCoinPool
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniCoinMiniCoinPoolUsingGET(id: Int64, completion: @escaping ((_ data: ResourceSMiniCoinPool?,_ error: Error?) -> Void)) {
        sMiniCoinMiniCoinPoolUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniCoinMiniCoinPool
     - GET /sMiniCoins/{id}/miniCoinPool
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<ResourceSMiniCoinPool> 
     */
    open class func sMiniCoinMiniCoinPoolUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<ResourceSMiniCoinPool> {
        var path = "/sMiniCoins/{id}/miniCoinPool"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniCoinPool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sMiniCoinMiniCoinPool
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniCoinMiniCoinPoolUsingPATCH(id: Int64, body: String, completion: @escaping ((_ data: ResourceSMiniCoinPool?,_ error: Error?) -> Void)) {
        sMiniCoinMiniCoinPoolUsingPATCHWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniCoinMiniCoinPool
     - PATCH /sMiniCoins/{id}/miniCoinPool
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSMiniCoinPool> 
     */
    open class func sMiniCoinMiniCoinPoolUsingPATCHWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSMiniCoinPool> {
        var path = "/sMiniCoins/{id}/miniCoinPool"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniCoinPool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sMiniCoinMiniCoinPool
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniCoinMiniCoinPoolUsingPOST(id: Int64, body: String, completion: @escaping ((_ data: ResourceSMiniCoinPool?,_ error: Error?) -> Void)) {
        sMiniCoinMiniCoinPoolUsingPOSTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniCoinMiniCoinPool
     - POST /sMiniCoins/{id}/miniCoinPool
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSMiniCoinPool> 
     */
    open class func sMiniCoinMiniCoinPoolUsingPOSTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSMiniCoinPool> {
        var path = "/sMiniCoins/{id}/miniCoinPool"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniCoinPool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sMiniCoinMiniCoinPool
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniCoinMiniCoinPoolUsingPUT(id: Int64, body: String, completion: @escaping ((_ data: ResourceSMiniCoinPool?,_ error: Error?) -> Void)) {
        sMiniCoinMiniCoinPoolUsingPUTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniCoinMiniCoinPool
     - PUT /sMiniCoins/{id}/miniCoinPool
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSMiniCoinPool> 
     */
    open class func sMiniCoinMiniCoinPoolUsingPUTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSMiniCoinPool> {
        var path = "/sMiniCoins/{id}/miniCoinPool"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniCoinPool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sMiniCoinOwner
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniCoinOwnerUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        sMiniCoinOwnerUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     sMiniCoinOwner
     - DELETE /sMiniCoins/{id}/owner
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Void> 
     */
    open class func sMiniCoinOwnerUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/sMiniCoins/{id}/owner"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sMiniCoinOwner
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniCoinOwnerUsingGET(id: Int64, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniCoinOwnerUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniCoinOwner
     - GET /sMiniCoins/{id}/owner
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniCoinOwnerUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniCoins/{id}/owner"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sMiniCoinOwner
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniCoinOwnerUsingPATCH(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniCoinOwnerUsingPATCHWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniCoinOwner
     - PATCH /sMiniCoins/{id}/owner
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniCoinOwnerUsingPATCHWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniCoins/{id}/owner"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sMiniCoinOwner
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniCoinOwnerUsingPOST(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniCoinOwnerUsingPOSTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniCoinOwner
     - POST /sMiniCoins/{id}/owner
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniCoinOwnerUsingPOSTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniCoins/{id}/owner"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sMiniCoinOwner
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniCoinOwnerUsingPUT(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniCoinOwnerUsingPUTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniCoinOwner
     - PUT /sMiniCoins/{id}/owner
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniCoinOwnerUsingPUTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniCoins/{id}/owner"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     saveSMiniCoin
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveSMiniCoinUsingPATCH(id: Int64, body: SMiniCoin, completion: @escaping ((_ data: ResourceSMiniCoin?,_ error: Error?) -> Void)) {
        saveSMiniCoinUsingPATCHWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     saveSMiniCoin
     - PATCH /sMiniCoins/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSMiniCoin> 
     */
    open class func saveSMiniCoinUsingPATCHWithRequestBuilder(id: Int64, body: SMiniCoin) -> RequestBuilder<ResourceSMiniCoin> {
        var path = "/sMiniCoins/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniCoin>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     saveSMiniCoin
     
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveSMiniCoinUsingPOST(body: SMiniCoin, completion: @escaping ((_ data: ResourceSMiniCoin?,_ error: Error?) -> Void)) {
        saveSMiniCoinUsingPOSTWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     saveSMiniCoin
     - POST /sMiniCoins
     - examples: [{output=none}]
     
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSMiniCoin> 
     */
    open class func saveSMiniCoinUsingPOSTWithRequestBuilder(body: SMiniCoin) -> RequestBuilder<ResourceSMiniCoin> {
        let path = "/sMiniCoins"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniCoin>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     saveSMiniCoin
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveSMiniCoinUsingPUT(id: Int64, body: SMiniCoin, completion: @escaping ((_ data: ResourceSMiniCoin?,_ error: Error?) -> Void)) {
        saveSMiniCoinUsingPUTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     saveSMiniCoin
     - PUT /sMiniCoins/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSMiniCoin> 
     */
    open class func saveSMiniCoinUsingPUTWithRequestBuilder(id: Int64, body: SMiniCoin) -> RequestBuilder<ResourceSMiniCoin> {
        var path = "/sMiniCoins/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniCoin>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     transferSMiniCoin
     
     - parameter newOwnerId: (query) newOwnerId 
     - parameter miniCoinId: (query) miniCoinId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transferSMiniCoinUsingGET(newOwnerId: Int64, miniCoinId: Int64, completion: @escaping ((_ data: Resourcenull?,_ error: Error?) -> Void)) {
        transferSMiniCoinUsingGETWithRequestBuilder(newOwnerId: newOwnerId, miniCoinId: miniCoinId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     transferSMiniCoin
     - GET /sMiniCoins/search/transfer
     - examples: [{output=none}]
     
     - parameter newOwnerId: (query) newOwnerId 
     - parameter miniCoinId: (query) miniCoinId 

     - returns: RequestBuilder<Resourcenull> 
     */
    open class func transferSMiniCoinUsingGETWithRequestBuilder(newOwnerId: Int64, miniCoinId: Int64) -> RequestBuilder<Resourcenull> {
        let path = "/sMiniCoins/search/transfer"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "newOwnerId": newOwnerId.encodeToJSON(), 
            "miniCoinId": miniCoinId.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<Resourcenull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}

//
// SConversation2ControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SConversation2ControllerAPI {
    /**
     addSConversation2
     
     - parameter sConversation2DTO: (body) sConversation2DTO 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addSConversation2UsingPOST(sConversation2DTO: SConversation2DTO, completion: @escaping ((_ data: SConversation2?,_ error: Error?) -> Void)) {
        addSConversation2UsingPOSTWithRequestBuilder(sConversation2DTO: sConversation2DTO).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     addSConversation2
     - POST /sConversation2
     - examples: [{output=none}]
     
     - parameter sConversation2DTO: (body) sConversation2DTO 

     - returns: RequestBuilder<SConversation2> 
     */
    open class func addSConversation2UsingPOSTWithRequestBuilder(sConversation2DTO: SConversation2DTO) -> RequestBuilder<SConversation2> {
        let path = "/sConversation2"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sConversation2DTO)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SConversation2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     mySConversation2
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mySConversation2UsingGET(id: Int64, completion: @escaping ((_ data: SConversation2?,_ error: Error?) -> Void)) {
        mySConversation2UsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     mySConversation2
     - GET /mySConversation2/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<SConversation2> 
     */
    open class func mySConversation2UsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<SConversation2> {
        var path = "/mySConversation2/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SConversation2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     mySConversation2
     
     - parameter accountId: (query) accountId 
     - parameter lastCId: (query) lastCId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mySConversation2UsingGET1(accountId: Int64, lastCId: Int64, completion: @escaping ((_ data: [SConversation2]?,_ error: Error?) -> Void)) {
        mySConversation2UsingGET1WithRequestBuilder(accountId: accountId, lastCId: lastCId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     mySConversation2
     - GET /mySConversation2
     - examples: [{output=none}]
     
     - parameter accountId: (query) accountId 
     - parameter lastCId: (query) lastCId 

     - returns: RequestBuilder<[SConversation2]> 
     */
    open class func mySConversation2UsingGET1WithRequestBuilder(accountId: Int64, lastCId: Int64) -> RequestBuilder<[SConversation2]> {
        let path = "/mySConversation2"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "accountId": accountId.encodeToJSON(), 
            "lastCId": lastCId.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[SConversation2]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}

//
// SNotificationEntityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SNotificationEntityAPI {
    /**
     deleteSNotification
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSNotificationUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteSNotificationUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     deleteSNotification
     - DELETE /sNotifications/{id}
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSNotificationUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/sNotifications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     findAllSNotification
     
     - parameter page: (query) page (optional)
     - parameter size: (query) size (optional)
     - parameter sort: (query) sort (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAllSNotificationUsingGET(page: String? = nil, size: String? = nil, sort: String? = nil, completion: @escaping ((_ data: ResourcesSNotification?,_ error: Error?) -> Void)) {
        findAllSNotificationUsingGETWithRequestBuilder(page: page, size: size, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     findAllSNotification
     - GET /sNotifications
     - examples: [{contentType=application/json, example={
  "links" : [ {
    "templated" : true,
    "rel" : "rel",
    "href" : "href"
  }, {
    "templated" : true,
    "rel" : "rel",
    "href" : "href"
  } ],
  "content" : [ {
    "data" : "data",
    "receiver" : {
      "createTime" : 0,
      "lastModifyTime" : 1,
      "loginName" : "loginName",
      "about" : "about",
      "mobile" : "mobile",
      "nickname" : "nickname",
      "loginPass" : "loginPass",
      "paymentPass" : "paymentPass",
      "id" : 6,
      "version" : 5,
      "email" : "email",
      "activated" : true
    },
    "createTime" : 0,
    "sender" : {
      "createTime" : 0,
      "lastModifyTime" : 1,
      "loginName" : "loginName",
      "about" : "about",
      "mobile" : "mobile",
      "nickname" : "nickname",
      "loginPass" : "loginPass",
      "paymentPass" : "paymentPass",
      "id" : 6,
      "version" : 5,
      "email" : "email",
      "activated" : true
    },
    "lastModifyTime" : 1,
    "action" : "action",
    "id" : 6,
    "title" : "title",
    "version" : 5,
    "activated" : true
  }, {
    "data" : "data",
    "receiver" : {
      "createTime" : 0,
      "lastModifyTime" : 1,
      "loginName" : "loginName",
      "about" : "about",
      "mobile" : "mobile",
      "nickname" : "nickname",
      "loginPass" : "loginPass",
      "paymentPass" : "paymentPass",
      "id" : 6,
      "version" : 5,
      "email" : "email",
      "activated" : true
    },
    "createTime" : 0,
    "sender" : {
      "createTime" : 0,
      "lastModifyTime" : 1,
      "loginName" : "loginName",
      "about" : "about",
      "mobile" : "mobile",
      "nickname" : "nickname",
      "loginPass" : "loginPass",
      "paymentPass" : "paymentPass",
      "id" : 6,
      "version" : 5,
      "email" : "email",
      "activated" : true
    },
    "lastModifyTime" : 1,
    "action" : "action",
    "id" : 6,
    "title" : "title",
    "version" : 5,
    "activated" : true
  } ]
}}]
     
     - parameter page: (query) page (optional)
     - parameter size: (query) size (optional)
     - parameter sort: (query) sort (optional)

     - returns: RequestBuilder<ResourcesSNotification> 
     */
    open class func findAllSNotificationUsingGETWithRequestBuilder(page: String? = nil, size: String? = nil, sort: String? = nil) -> RequestBuilder<ResourcesSNotification> {
        let path = "/sNotifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "page": page, 
            "size": size, 
            "sort": sort
        ])
        

        let requestBuilder: RequestBuilder<ResourcesSNotification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     findLatestNotificationsSNotification
     
     - parameter lastQueryTime: (query) lastQueryTime 
     - parameter receiverId: (query) receiverId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findLatestNotificationsSNotificationUsingGET(lastQueryTime: Int64, receiverId: Int64, completion: @escaping ((_ data: ResourcesListSNotification?,_ error: Error?) -> Void)) {
        findLatestNotificationsSNotificationUsingGETWithRequestBuilder(lastQueryTime: lastQueryTime, receiverId: receiverId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     findLatestNotificationsSNotification
     - GET /sNotifications/search/findLatestNotifications
     - examples: [{output=none}]
     
     - parameter lastQueryTime: (query) lastQueryTime 
     - parameter receiverId: (query) receiverId 

     - returns: RequestBuilder<ResourcesListSNotification> 
     */
    open class func findLatestNotificationsSNotificationUsingGETWithRequestBuilder(lastQueryTime: Int64, receiverId: Int64) -> RequestBuilder<ResourcesListSNotification> {
        let path = "/sNotifications/search/findLatestNotifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "lastQueryTime": lastQueryTime.encodeToJSON(), 
            "receiverId": receiverId.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<ResourcesListSNotification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     findOneSNotification
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findOneSNotificationUsingGET(id: Int64, completion: @escaping ((_ data: ResourceSNotification?,_ error: Error?) -> Void)) {
        findOneSNotificationUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     findOneSNotification
     - GET /sNotifications/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<ResourceSNotification> 
     */
    open class func findOneSNotificationUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<ResourceSNotification> {
        var path = "/sNotifications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSNotification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sNotificationReceiver
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sNotificationReceiverUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        sNotificationReceiverUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     sNotificationReceiver
     - DELETE /sNotifications/{id}/receiver
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Void> 
     */
    open class func sNotificationReceiverUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/sNotifications/{id}/receiver"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sNotificationReceiver
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sNotificationReceiverUsingGET(id: Int64, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sNotificationReceiverUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sNotificationReceiver
     - GET /sNotifications/{id}/receiver
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sNotificationReceiverUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<ResourceSAccount> {
        var path = "/sNotifications/{id}/receiver"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sNotificationReceiver
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sNotificationReceiverUsingPATCH(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sNotificationReceiverUsingPATCHWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sNotificationReceiver
     - PATCH /sNotifications/{id}/receiver
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sNotificationReceiverUsingPATCHWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sNotifications/{id}/receiver"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sNotificationReceiver
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sNotificationReceiverUsingPOST(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sNotificationReceiverUsingPOSTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sNotificationReceiver
     - POST /sNotifications/{id}/receiver
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sNotificationReceiverUsingPOSTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sNotifications/{id}/receiver"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sNotificationReceiver
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sNotificationReceiverUsingPUT(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sNotificationReceiverUsingPUTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sNotificationReceiver
     - PUT /sNotifications/{id}/receiver
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sNotificationReceiverUsingPUTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sNotifications/{id}/receiver"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sNotificationSender
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sNotificationSenderUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        sNotificationSenderUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     sNotificationSender
     - DELETE /sNotifications/{id}/sender
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Void> 
     */
    open class func sNotificationSenderUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/sNotifications/{id}/sender"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sNotificationSender
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sNotificationSenderUsingGET(id: Int64, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sNotificationSenderUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sNotificationSender
     - GET /sNotifications/{id}/sender
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sNotificationSenderUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<ResourceSAccount> {
        var path = "/sNotifications/{id}/sender"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sNotificationSender
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sNotificationSenderUsingPATCH(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sNotificationSenderUsingPATCHWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sNotificationSender
     - PATCH /sNotifications/{id}/sender
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sNotificationSenderUsingPATCHWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sNotifications/{id}/sender"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sNotificationSender
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sNotificationSenderUsingPOST(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sNotificationSenderUsingPOSTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sNotificationSender
     - POST /sNotifications/{id}/sender
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sNotificationSenderUsingPOSTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sNotifications/{id}/sender"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sNotificationSender
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sNotificationSenderUsingPUT(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sNotificationSenderUsingPUTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sNotificationSender
     - PUT /sNotifications/{id}/sender
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sNotificationSenderUsingPUTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sNotifications/{id}/sender"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     saveSNotification
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveSNotificationUsingPATCH(id: Int64, body: SNotification, completion: @escaping ((_ data: ResourceSNotification?,_ error: Error?) -> Void)) {
        saveSNotificationUsingPATCHWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     saveSNotification
     - PATCH /sNotifications/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSNotification> 
     */
    open class func saveSNotificationUsingPATCHWithRequestBuilder(id: Int64, body: SNotification) -> RequestBuilder<ResourceSNotification> {
        var path = "/sNotifications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSNotification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     saveSNotification
     
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveSNotificationUsingPOST(body: SNotification, completion: @escaping ((_ data: ResourceSNotification?,_ error: Error?) -> Void)) {
        saveSNotificationUsingPOSTWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     saveSNotification
     - POST /sNotifications
     - examples: [{output=none}]
     
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSNotification> 
     */
    open class func saveSNotificationUsingPOSTWithRequestBuilder(body: SNotification) -> RequestBuilder<ResourceSNotification> {
        let path = "/sNotifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSNotification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     saveSNotification
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveSNotificationUsingPUT(id: Int64, body: SNotification, completion: @escaping ((_ data: ResourceSNotification?,_ error: Error?) -> Void)) {
        saveSNotificationUsingPUTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     saveSNotification
     - PUT /sNotifications/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSNotification> 
     */
    open class func saveSNotificationUsingPUTWithRequestBuilder(id: Int64, body: SNotification) -> RequestBuilder<ResourceSNotification> {
        var path = "/sNotifications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSNotification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}

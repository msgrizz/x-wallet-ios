//
// SMiniContractEntityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SMiniContractEntityAPI {
    /**
     deleteSMiniContract
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSMiniContractUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteSMiniContractUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     deleteSMiniContract
     - DELETE /sMiniContracts/{id}
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSMiniContractUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/sMiniContracts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     findAllSMiniContract
     
     - parameter page: (query) page (optional)
     - parameter size: (query) size (optional)
     - parameter sort: (query) sort (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAllSMiniContractUsingGET(page: String? = nil, size: String? = nil, sort: String? = nil, completion: @escaping ((_ data: ResourcesSMiniContract?,_ error: Error?) -> Void)) {
        findAllSMiniContractUsingGETWithRequestBuilder(page: page, size: size, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     findAllSMiniContract
     - GET /sMiniContracts
     - examples: [{contentType=application/json, example={
  "links" : [ {
    "templated" : true,
    "rel" : "rel",
    "href" : "href"
  }, {
    "templated" : true,
    "rel" : "rel",
    "href" : "href"
  } ],
  "content" : [ {
    "abolished" : true,
    "receiver" : {
      "createTime" : 0,
      "lastModifyTime" : 1,
      "loginName" : "loginName",
      "about" : "about",
      "mobile" : "mobile",
      "nickname" : "nickname",
      "loginPass" : "loginPass",
      "paymentPass" : "paymentPass",
      "id" : 6,
      "version" : 5,
      "email" : "email",
      "activated" : true
    },
    "title" : "title",
    "confirmed" : true,
    "version" : 5,
    "content" : "content",
    "important" : true,
    "photoUrl" : "photoUrl",
    "audioUrl" : "audioUrl",
    "videoUrl" : "videoUrl",
    "createTime" : 0,
    "sender" : {
      "createTime" : 0,
      "lastModifyTime" : 1,
      "loginName" : "loginName",
      "about" : "about",
      "mobile" : "mobile",
      "nickname" : "nickname",
      "loginPass" : "loginPass",
      "paymentPass" : "paymentPass",
      "id" : 6,
      "version" : 5,
      "email" : "email",
      "activated" : true
    },
    "lastModifyTime" : 1,
    "isImportant" : true,
    "miniContractType" : "Currency",
    "id" : 6,
    "complete" : true,
    "activated" : true,
    "isComplete" : true
  }, {
    "abolished" : true,
    "receiver" : {
      "createTime" : 0,
      "lastModifyTime" : 1,
      "loginName" : "loginName",
      "about" : "about",
      "mobile" : "mobile",
      "nickname" : "nickname",
      "loginPass" : "loginPass",
      "paymentPass" : "paymentPass",
      "id" : 6,
      "version" : 5,
      "email" : "email",
      "activated" : true
    },
    "title" : "title",
    "confirmed" : true,
    "version" : 5,
    "content" : "content",
    "important" : true,
    "photoUrl" : "photoUrl",
    "audioUrl" : "audioUrl",
    "videoUrl" : "videoUrl",
    "createTime" : 0,
    "sender" : {
      "createTime" : 0,
      "lastModifyTime" : 1,
      "loginName" : "loginName",
      "about" : "about",
      "mobile" : "mobile",
      "nickname" : "nickname",
      "loginPass" : "loginPass",
      "paymentPass" : "paymentPass",
      "id" : 6,
      "version" : 5,
      "email" : "email",
      "activated" : true
    },
    "lastModifyTime" : 1,
    "isImportant" : true,
    "miniContractType" : "Currency",
    "id" : 6,
    "complete" : true,
    "activated" : true,
    "isComplete" : true
  } ]
}}]
     
     - parameter page: (query) page (optional)
     - parameter size: (query) size (optional)
     - parameter sort: (query) sort (optional)

     - returns: RequestBuilder<ResourcesSMiniContract> 
     */
    open class func findAllSMiniContractUsingGETWithRequestBuilder(page: String? = nil, size: String? = nil, sort: String? = nil) -> RequestBuilder<ResourcesSMiniContract> {
        let path = "/sMiniContracts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "page": page, 
            "size": size, 
            "sort": sort
        ])
        

        let requestBuilder: RequestBuilder<ResourcesSMiniContract>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     findOneSMiniContract
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findOneSMiniContractUsingGET(id: Int64, completion: @escaping ((_ data: ResourceSMiniContract?,_ error: Error?) -> Void)) {
        findOneSMiniContractUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     findOneSMiniContract
     - GET /sMiniContracts/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<ResourceSMiniContract> 
     */
    open class func findOneSMiniContractUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<ResourceSMiniContract> {
        var path = "/sMiniContracts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniContract>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sMiniContractReceiver
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniContractReceiverUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        sMiniContractReceiverUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     sMiniContractReceiver
     - DELETE /sMiniContracts/{id}/receiver
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Void> 
     */
    open class func sMiniContractReceiverUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/sMiniContracts/{id}/receiver"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sMiniContractReceiver
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniContractReceiverUsingGET(id: Int64, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniContractReceiverUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniContractReceiver
     - GET /sMiniContracts/{id}/receiver
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniContractReceiverUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniContracts/{id}/receiver"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sMiniContractReceiver
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniContractReceiverUsingPATCH(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniContractReceiverUsingPATCHWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniContractReceiver
     - PATCH /sMiniContracts/{id}/receiver
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniContractReceiverUsingPATCHWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniContracts/{id}/receiver"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sMiniContractReceiver
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniContractReceiverUsingPOST(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniContractReceiverUsingPOSTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniContractReceiver
     - POST /sMiniContracts/{id}/receiver
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniContractReceiverUsingPOSTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniContracts/{id}/receiver"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sMiniContractReceiver
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniContractReceiverUsingPUT(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniContractReceiverUsingPUTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniContractReceiver
     - PUT /sMiniContracts/{id}/receiver
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniContractReceiverUsingPUTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniContracts/{id}/receiver"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sMiniContractSender
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniContractSenderUsingDELETE(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        sMiniContractSenderUsingDELETEWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     sMiniContractSender
     - DELETE /sMiniContracts/{id}/sender
     
     - parameter id: (path) id 

     - returns: RequestBuilder<Void> 
     */
    open class func sMiniContractSenderUsingDELETEWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/sMiniContracts/{id}/sender"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sMiniContractSender
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniContractSenderUsingGET(id: Int64, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniContractSenderUsingGETWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniContractSender
     - GET /sMiniContracts/{id}/sender
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniContractSenderUsingGETWithRequestBuilder(id: Int64) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniContracts/{id}/sender"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     sMiniContractSender
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniContractSenderUsingPATCH(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniContractSenderUsingPATCHWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniContractSender
     - PATCH /sMiniContracts/{id}/sender
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniContractSenderUsingPATCHWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniContracts/{id}/sender"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sMiniContractSender
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniContractSenderUsingPOST(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniContractSenderUsingPOSTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniContractSender
     - POST /sMiniContracts/{id}/sender
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniContractSenderUsingPOSTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniContracts/{id}/sender"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     sMiniContractSender
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sMiniContractSenderUsingPUT(id: Int64, body: String, completion: @escaping ((_ data: ResourceSAccount?,_ error: Error?) -> Void)) {
        sMiniContractSenderUsingPUTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     sMiniContractSender
     - PUT /sMiniContracts/{id}/sender
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSAccount> 
     */
    open class func sMiniContractSenderUsingPUTWithRequestBuilder(id: Int64, body: String) -> RequestBuilder<ResourceSAccount> {
        var path = "/sMiniContracts/{id}/sender"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     saveSMiniContract
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveSMiniContractUsingPATCH(id: Int64, body: SMiniContract, completion: @escaping ((_ data: ResourceSMiniContract?,_ error: Error?) -> Void)) {
        saveSMiniContractUsingPATCHWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     saveSMiniContract
     - PATCH /sMiniContracts/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSMiniContract> 
     */
    open class func saveSMiniContractUsingPATCHWithRequestBuilder(id: Int64, body: SMiniContract) -> RequestBuilder<ResourceSMiniContract> {
        var path = "/sMiniContracts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniContract>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     saveSMiniContract
     
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveSMiniContractUsingPOST(body: SMiniContract, completion: @escaping ((_ data: ResourceSMiniContract?,_ error: Error?) -> Void)) {
        saveSMiniContractUsingPOSTWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     saveSMiniContract
     - POST /sMiniContracts
     - examples: [{output=none}]
     
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSMiniContract> 
     */
    open class func saveSMiniContractUsingPOSTWithRequestBuilder(body: SMiniContract) -> RequestBuilder<ResourceSMiniContract> {
        let path = "/sMiniContracts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniContract>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     saveSMiniContract
     
     - parameter id: (path) id 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveSMiniContractUsingPUT(id: Int64, body: SMiniContract, completion: @escaping ((_ data: ResourceSMiniContract?,_ error: Error?) -> Void)) {
        saveSMiniContractUsingPUTWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     saveSMiniContract
     - PUT /sMiniContracts/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 
     - parameter body: (body) body 

     - returns: RequestBuilder<ResourceSMiniContract> 
     */
    open class func saveSMiniContractUsingPUTWithRequestBuilder(id: Int64, body: SMiniContract) -> RequestBuilder<ResourceSMiniContract> {
        var path = "/sMiniContracts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResourceSMiniContract>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}

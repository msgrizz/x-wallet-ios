//
// SConversationControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SConversationControllerAPI {
    /**
     add
     
     - parameter sConversationDTO: (body) sConversationDTO 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addUsingPOST(sConversationDTO: SConversationDTO, completion: @escaping ((_ data: SConversation?,_ error: Error?) -> Void)) {
        addUsingPOSTWithRequestBuilder(sConversationDTO: sConversationDTO).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     add
     - POST /sConversations
     - examples: [{output=none}]
     
     - parameter sConversationDTO: (body) sConversationDTO 

     - returns: RequestBuilder<SConversation> 
     */
    open class func addUsingPOSTWithRequestBuilder(sConversationDTO: SConversationDTO) -> RequestBuilder<SConversation> {
        let path = "/sConversations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sConversationDTO)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SConversation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     getOne
     
     - parameter id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOneUsingGET1(id: Int64, completion: @escaping ((_ data: SConversation?,_ error: Error?) -> Void)) {
        getOneUsingGET1WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     getOne
     - GET /sConversation/{id}
     - examples: [{output=none}]
     
     - parameter id: (path) id 

     - returns: RequestBuilder<SConversation> 
     */
    open class func getOneUsingGET1WithRequestBuilder(id: Int64) -> RequestBuilder<SConversation> {
        var path = "/sConversation/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SConversation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     mySConversations
     
     - parameter accountId: (query) accountId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mySConversationsUsingGET(accountId: Int64? = nil, completion: @escaping ((_ data: [SConversation]?,_ error: Error?) -> Void)) {
        mySConversationsUsingGETWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     mySConversations
     - GET /mySConversations
     - examples: [{output=none}]
     
     - parameter accountId: (query) accountId (optional)

     - returns: RequestBuilder<[SConversation]> 
     */
    open class func mySConversationsUsingGETWithRequestBuilder(accountId: Int64? = nil) -> RequestBuilder<[SConversation]> {
        let path = "/mySConversations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "accountId": accountId?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[SConversation]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}

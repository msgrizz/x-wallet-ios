//
// DashboardDataDTO.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class DashboardDataDTO: Codable {

    public var coinName: String?
    public var content: String?
    public var expiredAt: Int64?
    public var id: Int64?
    public var important: Bool?
    public var issuerAvatar: String?
    public var issuerId: Int64?
    public var issuerName: String?
    public var receiver: Int64?
    public var receiverName: String?
    public var sender: Int64?
    public var senderName: String?
    public var title: String?


    
    public init(coinName: String?, content: String?, expiredAt: Int64?, id: Int64?, important: Bool?, issuerAvatar: String?, issuerId: Int64?, issuerName: String?, receiver: Int64?, receiverName: String?, sender: Int64?, senderName: String?, title: String?) {
        self.coinName = coinName
        self.content = content
        self.expiredAt = expiredAt
        self.id = id
        self.important = important
        self.issuerAvatar = issuerAvatar
        self.issuerId = issuerId
        self.issuerName = issuerName
        self.receiver = receiver
        self.receiverName = receiverName
        self.sender = sender
        self.senderName = senderName
        self.title = title
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(coinName, forKey: "coinName")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(expiredAt, forKey: "expiredAt")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(important, forKey: "important")
        try container.encodeIfPresent(issuerAvatar, forKey: "issuerAvatar")
        try container.encodeIfPresent(issuerId, forKey: "issuerId")
        try container.encodeIfPresent(issuerName, forKey: "issuerName")
        try container.encodeIfPresent(receiver, forKey: "receiver")
        try container.encodeIfPresent(receiverName, forKey: "receiverName")
        try container.encodeIfPresent(sender, forKey: "sender")
        try container.encodeIfPresent(senderName, forKey: "senderName")
        try container.encodeIfPresent(title, forKey: "title")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        coinName = try container.decodeIfPresent(String.self, forKey: "coinName")
        content = try container.decodeIfPresent(String.self, forKey: "content")
        expiredAt = try container.decodeIfPresent(Int64.self, forKey: "expiredAt")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        important = try container.decodeIfPresent(Bool.self, forKey: "important")
        issuerAvatar = try container.decodeIfPresent(String.self, forKey: "issuerAvatar")
        issuerId = try container.decodeIfPresent(Int64.self, forKey: "issuerId")
        issuerName = try container.decodeIfPresent(String.self, forKey: "issuerName")
        receiver = try container.decodeIfPresent(Int64.self, forKey: "receiver")
        receiverName = try container.decodeIfPresent(String.self, forKey: "receiverName")
        sender = try container.decodeIfPresent(Int64.self, forKey: "sender")
        senderName = try container.decodeIfPresent(String.self, forKey: "senderName")
        title = try container.decodeIfPresent(String.self, forKey: "title")
    }
}


//
// SMessage.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SMessage: Codable {

    public enum MessageType: String, Codable { 
        case text = "Text"
        case image = "Image"
        case url = "Url"
    }
    public var activated: Bool?
    public var content: String?
    public var createTime: Int64?
    public var id: Int64?
    public var lastModifyTime: Int64?
    public var messageType: MessageType?
    public var sconversation: SConversation?
    public var sender: SAccount?
    public var version: Int64?


    
    public init(activated: Bool?, content: String?, createTime: Int64?, id: Int64?, lastModifyTime: Int64?, messageType: MessageType?, sconversation: SConversation?, sender: SAccount?, version: Int64?) {
        self.activated = activated
        self.content = content
        self.createTime = createTime
        self.id = id
        self.lastModifyTime = lastModifyTime
        self.messageType = messageType
        self.sconversation = sconversation
        self.sender = sender
        self.version = version
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(activated, forKey: "activated")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(createTime, forKey: "createTime")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lastModifyTime, forKey: "lastModifyTime")
        try container.encodeIfPresent(messageType, forKey: "messageType")
        try container.encodeIfPresent(sconversation, forKey: "sconversation")
        try container.encodeIfPresent(sender, forKey: "sender")
        try container.encodeIfPresent(version, forKey: "version")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        activated = try container.decodeIfPresent(Bool.self, forKey: "activated")
        content = try container.decodeIfPresent(String.self, forKey: "content")
        createTime = try container.decodeIfPresent(Int64.self, forKey: "createTime")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        lastModifyTime = try container.decodeIfPresent(Int64.self, forKey: "lastModifyTime")
        messageType = try container.decodeIfPresent(MessageType.self, forKey: "messageType")
        sconversation = try container.decodeIfPresent(SConversation.self, forKey: "sconversation")
        sender = try container.decodeIfPresent(SAccount.self, forKey: "sender")
        version = try container.decodeIfPresent(Int64.self, forKey: "version")
    }
}


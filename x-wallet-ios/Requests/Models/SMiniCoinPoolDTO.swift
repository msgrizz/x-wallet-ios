//
// SMiniCoinPoolDTO.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SMiniCoinPoolDTO: Codable {

    public var important: Bool?
    public var name: String?
    public var content: String?
    public var logo: String?
    public var fixed: Int64?
    public var transferable: Bool?
    public var issuer: Int64?
    public var isImportant: Bool?


    
    public init(important: Bool?, name: String?, content: String?, logo: String?, fixed: Int64?, transferable: Bool?, issuer: Int64?, isImportant: Bool?) {
        self.important = important
        self.name = name
        self.content = content
        self.logo = logo
        self.fixed = fixed
        self.transferable = transferable
        self.issuer = issuer
        self.isImportant = isImportant
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(important, forKey: "important")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(fixed, forKey: "fixed")
        try container.encodeIfPresent(transferable, forKey: "transferable")
        try container.encodeIfPresent(issuer, forKey: "issuer")
        try container.encodeIfPresent(isImportant, forKey: "isImportant")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        important = try container.decodeIfPresent(Bool.self, forKey: "important")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        content = try container.decodeIfPresent(String.self, forKey: "content")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        fixed = try container.decodeIfPresent(Int64.self, forKey: "fixed")
        transferable = try container.decodeIfPresent(Bool.self, forKey: "transferable")
        issuer = try container.decodeIfPresent(Int64.self, forKey: "issuer")
        isImportant = try container.decodeIfPresent(Bool.self, forKey: "isImportant")
    }
}


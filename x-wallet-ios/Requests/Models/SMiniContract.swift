//
// SMiniContract.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SMiniContract: Codable {

    public enum MiniContractType: String, Codable { 
        case currency = "Currency"
        case receipt = "Receipt"
        case promise = "Promise"
        case iou = "Iou"
    }
    public var abolished: Bool?
    public var activated: Bool?
    public var audioUrl: String?
    public var complete: Bool?
    public var confirmed: Bool?
    public var content: String?
    public var createTime: Int64?
    public var id: Int64?
    public var important: Bool?
    public var lastModifyTime: Int64?
    public var miniContractType: MiniContractType?
    public var photoUrl: String?
    public var receiver: SAccount?
    public var sender: SAccount?
    public var title: String?
    public var version: Int64?
    public var videoUrl: String?


    
    public init(abolished: Bool?, activated: Bool?, audioUrl: String?, complete: Bool?, confirmed: Bool?, content: String?, createTime: Int64?, id: Int64?, important: Bool?, lastModifyTime: Int64?, miniContractType: MiniContractType?, photoUrl: String?, receiver: SAccount?, sender: SAccount?, title: String?, version: Int64?, videoUrl: String?) {
        self.abolished = abolished
        self.activated = activated
        self.audioUrl = audioUrl
        self.complete = complete
        self.confirmed = confirmed
        self.content = content
        self.createTime = createTime
        self.id = id
        self.important = important
        self.lastModifyTime = lastModifyTime
        self.miniContractType = miniContractType
        self.photoUrl = photoUrl
        self.receiver = receiver
        self.sender = sender
        self.title = title
        self.version = version
        self.videoUrl = videoUrl
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(abolished, forKey: "abolished")
        try container.encodeIfPresent(activated, forKey: "activated")
        try container.encodeIfPresent(audioUrl, forKey: "audioUrl")
        try container.encodeIfPresent(complete, forKey: "complete")
        try container.encodeIfPresent(confirmed, forKey: "confirmed")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(createTime, forKey: "createTime")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(important, forKey: "important")
        try container.encodeIfPresent(lastModifyTime, forKey: "lastModifyTime")
        try container.encodeIfPresent(miniContractType, forKey: "miniContractType")
        try container.encodeIfPresent(photoUrl, forKey: "photoUrl")
        try container.encodeIfPresent(receiver, forKey: "receiver")
        try container.encodeIfPresent(sender, forKey: "sender")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(version, forKey: "version")
        try container.encodeIfPresent(videoUrl, forKey: "videoUrl")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        abolished = try container.decodeIfPresent(Bool.self, forKey: "abolished")
        activated = try container.decodeIfPresent(Bool.self, forKey: "activated")
        audioUrl = try container.decodeIfPresent(String.self, forKey: "audioUrl")
        complete = try container.decodeIfPresent(Bool.self, forKey: "complete")
        confirmed = try container.decodeIfPresent(Bool.self, forKey: "confirmed")
        content = try container.decodeIfPresent(String.self, forKey: "content")
        createTime = try container.decodeIfPresent(Int64.self, forKey: "createTime")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        important = try container.decodeIfPresent(Bool.self, forKey: "important")
        lastModifyTime = try container.decodeIfPresent(Int64.self, forKey: "lastModifyTime")
        miniContractType = try container.decodeIfPresent(MiniContractType.self, forKey: "miniContractType")
        photoUrl = try container.decodeIfPresent(String.self, forKey: "photoUrl")
        receiver = try container.decodeIfPresent(SAccount.self, forKey: "receiver")
        sender = try container.decodeIfPresent(SAccount.self, forKey: "sender")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        version = try container.decodeIfPresent(Int64.self, forKey: "version")
        videoUrl = try container.decodeIfPresent(String.self, forKey: "videoUrl")
    }
}


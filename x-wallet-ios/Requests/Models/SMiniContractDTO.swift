//
// SMiniContractDTO.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SMiniContractDTO: Codable {

    public enum MiniContractType: String, Codable { 
        case currency = "Currency"
        case receipt = "Receipt"
        case promise = "Promise"
        case iou = "Iou"
    }
    public var complete: Bool?
    public var important: Bool?
    public var title: String?
    public var content: String?
    public var sender: Int64?
    public var receiver: Int64?
    public var confirmed: Bool?
    public var abolished: Bool?
    public var isImportant: Bool?
    public var isComplete: Bool?
    public var photoUrl: String?
    public var videoUrl: String?
    public var audioUrl: String?
    public var miniContractType: MiniContractType?


    
    public init(complete: Bool?, important: Bool?, title: String?, content: String?, sender: Int64?, receiver: Int64?, confirmed: Bool?, abolished: Bool?, isImportant: Bool?, isComplete: Bool?, photoUrl: String?, videoUrl: String?, audioUrl: String?, miniContractType: MiniContractType?) {
        self.complete = complete
        self.important = important
        self.title = title
        self.content = content
        self.sender = sender
        self.receiver = receiver
        self.confirmed = confirmed
        self.abolished = abolished
        self.isImportant = isImportant
        self.isComplete = isComplete
        self.photoUrl = photoUrl
        self.videoUrl = videoUrl
        self.audioUrl = audioUrl
        self.miniContractType = miniContractType
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(complete, forKey: "complete")
        try container.encodeIfPresent(important, forKey: "important")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(sender, forKey: "sender")
        try container.encodeIfPresent(receiver, forKey: "receiver")
        try container.encodeIfPresent(confirmed, forKey: "confirmed")
        try container.encodeIfPresent(abolished, forKey: "abolished")
        try container.encodeIfPresent(isImportant, forKey: "isImportant")
        try container.encodeIfPresent(isComplete, forKey: "isComplete")
        try container.encodeIfPresent(photoUrl, forKey: "photoUrl")
        try container.encodeIfPresent(videoUrl, forKey: "videoUrl")
        try container.encodeIfPresent(audioUrl, forKey: "audioUrl")
        try container.encodeIfPresent(miniContractType, forKey: "miniContractType")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        complete = try container.decodeIfPresent(Bool.self, forKey: "complete")
        important = try container.decodeIfPresent(Bool.self, forKey: "important")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        content = try container.decodeIfPresent(String.self, forKey: "content")
        sender = try container.decodeIfPresent(Int64.self, forKey: "sender")
        receiver = try container.decodeIfPresent(Int64.self, forKey: "receiver")
        confirmed = try container.decodeIfPresent(Bool.self, forKey: "confirmed")
        abolished = try container.decodeIfPresent(Bool.self, forKey: "abolished")
        isImportant = try container.decodeIfPresent(Bool.self, forKey: "isImportant")
        isComplete = try container.decodeIfPresent(Bool.self, forKey: "isComplete")
        photoUrl = try container.decodeIfPresent(String.self, forKey: "photoUrl")
        videoUrl = try container.decodeIfPresent(String.self, forKey: "videoUrl")
        audioUrl = try container.decodeIfPresent(String.self, forKey: "audioUrl")
        miniContractType = try container.decodeIfPresent(MiniContractType.self, forKey: "miniContractType")
    }
}


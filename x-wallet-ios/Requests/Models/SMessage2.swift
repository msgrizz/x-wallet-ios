//
// SMessage2.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

public enum ModelType: String, Codable {
    case text = "Text"
    case image = "Image"
    case audio = "Audio"
    case notification = "Notification"
    case profile = "Profile"
}

public enum MiniContractAction: String, Codable {
    case created = "Created"
    case confirmed = "Confirmed"
    case rejected = "Rejected"
}
public enum TokenAction: String, Codable {
    case created = "Created"
    case transfered = "Transfered"
    case received = "Received"
}

open class SMessage2: Codable {



    public var activated: Bool?
    /** token - 数量 */
    public var amount: Int64?
    public var content: String?
    /** contract - id */
    public var contractId: Int64?
    public var conversationId: Int64?
    public var createTime: Int64?
    public var id: Int64?
    public var lastModifyTime: Int64?
    /** contract - 操作动作 */
    public var miniContractAction: MiniContractAction?
    /** profile - id */
    public var profileId: Int64?
    public var sender: SAccount?
    /** token - 操作动作 */
    public var tokenAction: TokenAction?
    /** token - id */
    public var tokenId: Int64?
    public var type: ModelType?
    public var version: Int64?


    
    public init(activated: Bool?, amount: Int64?, content: String?, contractId: Int64?, conversationId: Int64?, createTime: Int64?, id: Int64?, lastModifyTime: Int64?, miniContractAction: MiniContractAction?, profileId: Int64?, sender: SAccount?, tokenAction: TokenAction?, tokenId: Int64?, type: ModelType?, version: Int64?) {
        self.activated = activated
        self.amount = amount
        self.content = content
        self.contractId = contractId
        self.conversationId = conversationId
        self.createTime = createTime
        self.id = id
        self.lastModifyTime = lastModifyTime
        self.miniContractAction = miniContractAction
        self.profileId = profileId
        self.sender = sender
        self.tokenAction = tokenAction
        self.tokenId = tokenId
        self.type = type
        self.version = version
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(activated, forKey: "activated")
        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(contractId, forKey: "contractId")
        try container.encodeIfPresent(conversationId, forKey: "conversationId")
        try container.encodeIfPresent(createTime, forKey: "createTime")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lastModifyTime, forKey: "lastModifyTime")
        try container.encodeIfPresent(miniContractAction, forKey: "miniContractAction")
        try container.encodeIfPresent(profileId, forKey: "profileId")
        try container.encodeIfPresent(sender, forKey: "sender")
        try container.encodeIfPresent(tokenAction, forKey: "tokenAction")
        try container.encodeIfPresent(tokenId, forKey: "tokenId")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(version, forKey: "version")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        activated = try container.decodeIfPresent(Bool.self, forKey: "activated")
        amount = try container.decodeIfPresent(Int64.self, forKey: "amount")
        content = try container.decodeIfPresent(String.self, forKey: "content")
        contractId = try container.decodeIfPresent(Int64.self, forKey: "contractId")
        conversationId = try container.decodeIfPresent(Int64.self, forKey: "conversationId")
        createTime = try container.decodeIfPresent(Int64.self, forKey: "createTime")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        lastModifyTime = try container.decodeIfPresent(Int64.self, forKey: "lastModifyTime")
        miniContractAction = try container.decodeIfPresent(MiniContractAction.self, forKey: "miniContractAction")
        profileId = try container.decodeIfPresent(Int64.self, forKey: "profileId")
        sender = try container.decodeIfPresent(SAccount.self, forKey: "sender")
        tokenAction = try container.decodeIfPresent(TokenAction.self, forKey: "tokenAction")
        tokenId = try container.decodeIfPresent(Int64.self, forKey: "tokenId")
        type = try container.decodeIfPresent(ModelType.self, forKey: "type")
        version = try container.decodeIfPresent(Int64.self, forKey: "version")
    }
}


//
// SMembershipOwner.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SMembershipOwner: Codable {

    public var activated: Bool?
    public var createTime: Int64?
    public var id: Int64?
    public var important: Bool?
    public var lastModifyTime: Int64?
    public var owner: SAccount?
    public var smembership: SMembership?
    public var version: Int64?


    
    public init(activated: Bool?, createTime: Int64?, id: Int64?, important: Bool?, lastModifyTime: Int64?, owner: SAccount?, smembership: SMembership?, version: Int64?) {
        self.activated = activated
        self.createTime = createTime
        self.id = id
        self.important = important
        self.lastModifyTime = lastModifyTime
        self.owner = owner
        self.smembership = smembership
        self.version = version
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(activated, forKey: "activated")
        try container.encodeIfPresent(createTime, forKey: "createTime")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(important, forKey: "important")
        try container.encodeIfPresent(lastModifyTime, forKey: "lastModifyTime")
        try container.encodeIfPresent(owner, forKey: "owner")
        try container.encodeIfPresent(smembership, forKey: "smembership")
        try container.encodeIfPresent(version, forKey: "version")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        activated = try container.decodeIfPresent(Bool.self, forKey: "activated")
        createTime = try container.decodeIfPresent(Int64.self, forKey: "createTime")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        important = try container.decodeIfPresent(Bool.self, forKey: "important")
        lastModifyTime = try container.decodeIfPresent(Int64.self, forKey: "lastModifyTime")
        owner = try container.decodeIfPresent(SAccount.self, forKey: "owner")
        smembership = try container.decodeIfPresent(SMembership.self, forKey: "smembership")
        version = try container.decodeIfPresent(Int64.self, forKey: "version")
    }
}


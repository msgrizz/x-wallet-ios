//
// ResourceSMiniCoinPool.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ResourceSMiniCoinPool: Codable {

    public var activated: Bool?
    public var content: String?
    public var createTime: Int64?
    public var fixed: Int64?
    public var id: Int64?
    public var important: Bool?
    public var issuer: SAccount?
    public var lastModifyTime: Int64?
    public var links: [Link]?
    public var logo: String?
    public var name: String?
    public var transferable: Bool?
    public var version: Int64?


    
    public init(activated: Bool?, content: String?, createTime: Int64?, fixed: Int64?, id: Int64?, important: Bool?, issuer: SAccount?, lastModifyTime: Int64?, links: [Link]?, logo: String?, name: String?, transferable: Bool?, version: Int64?) {
        self.activated = activated
        self.content = content
        self.createTime = createTime
        self.fixed = fixed
        self.id = id
        self.important = important
        self.issuer = issuer
        self.lastModifyTime = lastModifyTime
        self.links = links
        self.logo = logo
        self.name = name
        self.transferable = transferable
        self.version = version
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(activated, forKey: "activated")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(createTime, forKey: "createTime")
        try container.encodeIfPresent(fixed, forKey: "fixed")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(important, forKey: "important")
        try container.encodeIfPresent(issuer, forKey: "issuer")
        try container.encodeIfPresent(lastModifyTime, forKey: "lastModifyTime")
        try container.encodeIfPresent(links, forKey: "links")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(transferable, forKey: "transferable")
        try container.encodeIfPresent(version, forKey: "version")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        activated = try container.decodeIfPresent(Bool.self, forKey: "activated")
        content = try container.decodeIfPresent(String.self, forKey: "content")
        createTime = try container.decodeIfPresent(Int64.self, forKey: "createTime")
        fixed = try container.decodeIfPresent(Int64.self, forKey: "fixed")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        important = try container.decodeIfPresent(Bool.self, forKey: "important")
        issuer = try container.decodeIfPresent(SAccount.self, forKey: "issuer")
        lastModifyTime = try container.decodeIfPresent(Int64.self, forKey: "lastModifyTime")
        links = try container.decodeIfPresent([Link].self, forKey: "links")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        transferable = try container.decodeIfPresent(Bool.self, forKey: "transferable")
        version = try container.decodeIfPresent(Int64.self, forKey: "version")
    }
}


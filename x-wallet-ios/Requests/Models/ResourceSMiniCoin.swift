//
// ResourceSMiniCoin.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ResourceSMiniCoin: Codable {

    public var activated: Bool?
    public var createTime: Int64?
    public var id: Int64?
    public var lastModifyTime: Int64?
    public var links: [Link]?
    public var miniCoinPool: SMiniCoinPool?
    public var owner: SAccount?
    public var version: Int64?


    
    public init(activated: Bool?, createTime: Int64?, id: Int64?, lastModifyTime: Int64?, links: [Link]?, miniCoinPool: SMiniCoinPool?, owner: SAccount?, version: Int64?) {
        self.activated = activated
        self.createTime = createTime
        self.id = id
        self.lastModifyTime = lastModifyTime
        self.links = links
        self.miniCoinPool = miniCoinPool
        self.owner = owner
        self.version = version
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(activated, forKey: "activated")
        try container.encodeIfPresent(createTime, forKey: "createTime")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lastModifyTime, forKey: "lastModifyTime")
        try container.encodeIfPresent(links, forKey: "links")
        try container.encodeIfPresent(miniCoinPool, forKey: "miniCoinPool")
        try container.encodeIfPresent(owner, forKey: "owner")
        try container.encodeIfPresent(version, forKey: "version")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        activated = try container.decodeIfPresent(Bool.self, forKey: "activated")
        createTime = try container.decodeIfPresent(Int64.self, forKey: "createTime")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        lastModifyTime = try container.decodeIfPresent(Int64.self, forKey: "lastModifyTime")
        links = try container.decodeIfPresent([Link].self, forKey: "links")
        miniCoinPool = try container.decodeIfPresent(SMiniCoinPool.self, forKey: "miniCoinPool")
        owner = try container.decodeIfPresent(SAccount.self, forKey: "owner")
        version = try container.decodeIfPresent(Int64.self, forKey: "version")
    }
}

